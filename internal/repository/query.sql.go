// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const clearLinks = `-- name: ClearLinks :exec
DELETE FROM links
WHERE user_id = ?
`

func (q *Queries) ClearLinks(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, clearLinks, userID)
	return err
}

const createLink = `-- name: CreateLink :one
INSERT INTO links (url, title, note, user_id)
VALUES (?, ?, ?, ?)
RETURNING id, url
`

type CreateLinkParams struct {
	Url    string         `json:"url"`
	Title  string         `json:"title"`
	Note   sql.NullString `json:"note"`
	UserID int64          `json:"user_id"`
}

type CreateLinkRow struct {
	ID  int64  `json:"id"`
	Url string `json:"url"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (CreateLinkRow, error) {
	row := q.db.QueryRowContext(ctx, createLink,
		arg.Url,
		arg.Title,
		arg.Note,
		arg.UserID,
	)
	var i CreateLinkRow
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (token_hash, name, short_token, user_id)
VALUES (?, ?, ?, ?)
`

type CreateTokenParams struct {
	TokenHash  string `json:"token_hash"`
	Name       string `json:"name"`
	ShortToken string `json:"short_token"`
	UserID     int64  `json:"user_id"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.TokenHash,
		arg.Name,
		arg.ShortToken,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES (?, ?)
RETURNING id, username
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = ? AND user_id = ?
`

type DeleteTokenParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteToken, arg.ID, arg.UserID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username FROM users
WHERE username = ? AND password = ?
`

type GetUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type GetUserRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Username, arg.Password)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const listLinks = `-- name: ListLinks :many
SELECT url, title, note, bookmarked_at FROM links
WHERE user_id = ?
`

type ListLinksRow struct {
	Url          string         `json:"url"`
	Title        string         `json:"title"`
	Note         sql.NullString `json:"note"`
	BookmarkedAt sql.NullTime   `json:"bookmarked_at"`
}

func (q *Queries) ListLinks(ctx context.Context, userID int64) ([]ListLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, listLinks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLinksRow
	for rows.Next() {
		var i ListLinksRow
		if err := rows.Scan(
			&i.Url,
			&i.Title,
			&i.Note,
			&i.BookmarkedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokens = `-- name: ListTokens :many
SELECT id, name, short_token FROM tokens
WHERE user_id = ?
`

type ListTokensRow struct {
	ID         int64  `json:"id"`
	Name       string `json:"name"`
	ShortToken string `json:"short_token"`
}

func (q *Queries) ListTokens(ctx context.Context, userID int64) ([]ListTokensRow, error) {
	rows, err := q.db.QueryContext(ctx, listTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTokensRow
	for rows.Next() {
		var i ListTokensRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ShortToken); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
